import os
import pandas as pd
import streamlit as st
import plotly.express as px
from dotenv import load_dotenv

# Load bi·∫øn m√¥i tr∆∞·ªùng cho MAP4D
load_dotenv()
MAP4D_API_KEY = st.secrets.get("MAP4D_API_KEY") or os.getenv("MAP4D_API_KEY")
MAP4D_MAP_ID = st.secrets.get("MAP4D_MAP_ID") or os.getenv("MAP4D_MAP_ID", "")

def extract_plant_type(name):
    name_lower = name.lower()
    if "m·∫∑t tr·ªùi" in name_lower:
        return "ƒêi·ªán m·∫∑t tr·ªùi"
    elif "gi√≥" in name_lower:
        return "ƒêi·ªán gi√≥"
    elif "thu·ª∑" in name_lower:
        return "Thu·ª∑ ƒëi·ªán"
    else:
        return name

def load_data(file_path):
    try:
        df = pd.read_csv(file_path, sep='\t')
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {e}")
        return None

    # Ki·ªÉm tra c√°c c·ªôt c·∫ßn thi·∫øt
    if 'latlng' not in df.columns or 'sub_type' not in df.columns or 'Column1' not in df.columns:
        st.error("‚ùå D·ªØ li·ªáu kh√¥ng ƒë·∫ßy ƒë·ªß c√°c c·ªôt c·∫ßn thi·∫øt!")
        return None

    # X·ª≠ l√Ω d·ªØ li·ªáu v·ªã tr√≠
    df = df.dropna(subset=['latlng'])
    df[['lat', 'lon']] = df['latlng'].str.replace('"', '').str.split(',', expand=True)
    df['lat'] = pd.to_numeric(df['lat'], errors='coerce')
    df['lon'] = pd.to_numeric(df['lon'], errors='coerce')
    df = df.dropna(subset=['lat', 'lon'])

    # ƒê·ªïi t√™n c·ªôt v√† x·ª≠ l√Ω ph√¢n lo·∫°i ph·ª•
    df.rename(columns={'Column1': 'name'}, inplace=True)
    df['sub_type'] = df.apply(
        lambda row: row['type'] if pd.isna(row['sub_type']) or row['sub_type'] == 'None' else row['sub_type'],
        axis=1
    )
    df['type'] = df['type'].apply(extract_plant_type)
    return df

def render_map4d(df, api_key, map_id=""):
    template_path = os.path.join(os.path.dirname(__file__), 'map4d_template.html')
    if not os.path.exists(template_path):
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y file map4d_template.html!")
        return
    with open(template_path, "r", encoding="utf-8") as f:
        html_template = f.read()

    marker_js = ""
    for _, row in df.iterrows():
        marker_js += f"""
        new map4d.Marker({{
          position: {{ lat: {row['lat']}, lng: {row['lon']} }},
          title: "{row['name']}"
        }}).setMap(map);
        """
    html_content = (html_template
                    .replace("##MARKERS_PLACEHOLDER##", marker_js)
                    .replace("__API_KEY__", api_key)
                    .replace("__MAP_ID__", map_id or ""))
    st.components.v1.html(html_content, height=800)

def filter_data(df, filters):
    filtered_df = df.copy()
    if filters.get("name"):
        filtered_df = filtered_df[filtered_df['name'].str.contains(filters["name"], case=False, na=False)]
    if filters.get("type") and filters["type"] != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['type'] == filters["type"]]
    if filters.get("sub_type") and filters["sub_type"] != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['sub_type'] == filters["sub_type"]]
    if filters.get("province") and filters["province"] != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['province'] == filters["province"]]
    return filtered_df

def render_data_tab(df, filtered_df):
    st.subheader("D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω")
    st.dataframe(filtered_df[['name', 'type', 'sub_type', 'river', 'lat', 'lon', 'province']])
    
    st.subheader("S·ªë l∆∞·ª£ng nh√† m√°y theo lo·∫°i h√¨nh")
    type_counts = df['type'].value_counts().reset_index()
    type_counts.columns = ['Lo·∫°i h√¨nh', 'S·ªë l∆∞·ª£ng']
    st.dataframe(type_counts)

def render_map_tab(df):
    st.subheader("B·∫£n ƒë·ªì nh√† m√°y ƒëi·ªán")
    st.info("S·ª≠ d·ª•ng b·ªô l·ªçc ri√™ng cho b·∫£n ƒë·ªì.")
    type_options = ['T·∫•t c·∫£'] + sorted(df['type'].unique().tolist())
    province_options = ['T·∫•t c·∫£'] + (sorted(df['province'].dropna().unique().tolist()) if 'province' in df.columns else [])
    
    plant_type_filter_map = st.selectbox("Ch·ªçn lo·∫°i nh√† m√°y (b·∫£n ƒë·ªì):", options=type_options, key="plant_type_filter_map")
    province_filter_map = st.selectbox("Ch·ªçn v·ªã tr√≠ (b·∫£n ƒë·ªì):", options=province_options, key="province_filter_map")
    
    filtered_map_df = df.copy()
    if plant_type_filter_map != 'T·∫•t c·∫£':
        filtered_map_df = filtered_map_df[filtered_map_df['type'] == plant_type_filter_map]
    if province_filter_map != 'T·∫•t c·∫£':
        filtered_map_df = filtered_map_df[filtered_map_df['province'] == province_filter_map]
    
    if not MAP4D_API_KEY:
        st.warning("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh MAP4D_API_KEY trong file .env")
    else:
        if st.button("Hi·ªÉn th·ªã b·∫£n ƒë·ªì"):
            render_map4d(filtered_map_df[['lat', 'lon', 'name']], api_key=MAP4D_API_KEY, map_id=MAP4D_MAP_ID)

def render_chart_tab(df, filtered_df):
    st.subheader("Bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c")
    chart_option = st.selectbox("Ch·ªçn bi·ªÉu ƒë·ªì:", options=["Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng", "Bi·ªÉu ƒë·ªì tr√≤n", "Bi·ªÉu ƒë·ªì c·ªôt ngang"])
    
    if chart_option == "Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng":
        st.markdown("### Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng: S·ªë l∆∞·ª£ng nh√† m√°y theo lo·∫°i h√¨nh v√† ph√¢n lo·∫°i ph·ª•")
        type_subtype_counts = filtered_df.groupby(['type', 'sub_type']).size().reset_index(name='count')
        fig_bar = px.bar(
            type_subtype_counts, 
            x='type', 
            y='count', 
            color='sub_type', 
            title="S·ªë l∆∞·ª£ng nh√† m√°y theo lo·∫°i h√¨nh v√† ph√¢n lo·∫°i ph·ª•",
            labels={'type': 'Lo·∫°i h√¨nh', 'count': 'S·ªë l∆∞·ª£ng', 'sub_type': 'Ph√¢n lo·∫°i ph·ª•'},
            barmode='stack'
        )
        st.plotly_chart(fig_bar, use_container_width=True)
        
    elif chart_option == "Bi·ªÉu ƒë·ªì tr√≤n":
        st.markdown("### Bi·ªÉu ƒë·ªì tr√≤n: T·ªâ l·ªá ph·∫ßn trƒÉm nh√† m√°y theo lo·∫°i h√¨nh")
        type_counts = df['type'].value_counts()
        fig_pie = px.pie(
            names=type_counts.index, 
            values=type_counts.values, 
            title="T·ªâ l·ªá ph·∫ßn trƒÉm nh√† m√°y"
        )
        st.plotly_chart(fig_pie, use_container_width=True)
        
    elif chart_option == "Bi·ªÉu ƒë·ªì c·ªôt ngang":
        st.markdown("### Bi·ªÉu ƒë·ªì c·ªôt ngang: T·ªïng c√¥ng su·∫•t")
        horizontal_option = st.selectbox("Ch·ªçn d·ªØ li·ªáu:", options=["Lo·∫°i h√¨nh", "Ph√¢n lo·∫°i ph·ª•", "V·ªã tr√≠"])
        if horizontal_option == "Lo·∫°i h√¨nh":
            cap_df = df.groupby('type')['capacity'].sum().reset_index()
            fig_hbar = px.bar(
                cap_df, 
                x='capacity', 
                y='type', 
                orientation='h', 
                title="T·ªïng c√¥ng su·∫•t theo lo·∫°i h√¨nh",
                labels={'capacity': 'T·ªïng c√¥ng su·∫•t (MW)', 'type': 'Lo·∫°i h√¨nh'}
            )
            st.plotly_chart(fig_hbar, use_container_width=True)
        elif horizontal_option == "Ph√¢n lo·∫°i ph·ª•":
            cap_df = df.groupby('sub_type')['capacity'].sum().reset_index()
            fig_hbar = px.bar(
                cap_df, 
                x='capacity', 
                y='sub_type', 
                orientation='h', 
                title="T·ªïng c√¥ng su·∫•t theo ph√¢n lo·∫°i ph·ª•",
                labels={'capacity': 'T·ªïng c√¥ng su·∫•t (MW)', 'sub_type': 'Ph√¢n lo·∫°i ph·ª•'}
            )
            st.plotly_chart(fig_hbar, use_container_width=True)
        elif horizontal_option == "V·ªã tr√≠":
            cap_df = df.groupby('province')['capacity'].sum().reset_index()
            fig_hbar = px.bar(
                cap_df, 
                x='capacity', 
                y='province', 
                orientation='h', 
                title="T·ªïng c√¥ng su·∫•t theo t·ªânh th√†nh",
                labels={'capacity': 'T·ªïng c√¥ng su·∫•t (MW)', 'province': 'T·ªânh th√†nh'}
            )
            st.plotly_chart(fig_hbar, use_container_width=True)

def main():
    st.set_page_config(page_title="·ª®ng d·ª•ng Nh√† m√°y ƒëi·ªán & B√°n l·∫ª", layout="wide")
    menu_option = st.sidebar.radio("Ch·ªçn lo·∫°i h√¨nh:", options=["Nh√† m√°y ƒëi·ªán", "C∆° s·ªü b√°n l·∫ª"])
    
    if menu_option == "Nh√† m√°y ƒëi·ªán":
        st.title("üìä Th·ªëng k√™ Nh√† m√°y ƒëi·ªán t√°i t·∫°o")
        file_path = os.path.join(os.path.dirname(__file__), 'input.csv')
        df = load_data(file_path)
        if df is None:
            return

        # Sidebar: B·ªô l·ªçc d·ªØ li·ªáu
        st.sidebar.header("B·ªô l·ªçc d·ªØ li·ªáu")
        name_filter = st.sidebar.text_input("L·ªçc theo t√™n nh√† m√°y:", "")
        type_options = ['T·∫•t c·∫£'] + sorted(df['type'].unique().tolist())
        type_filter = st.sidebar.selectbox("L·ªçc theo lo·∫°i nh√† m√°y:", options=type_options)
        sub_type_options = ['T·∫•t c·∫£'] + sorted(df['sub_type'].unique().tolist())
        sub_type_filter = st.sidebar.selectbox("L·ªçc theo ph√¢n lo·∫°i ph·ª•:", options=sub_type_options)
        province_options = ['T·∫•t c·∫£'] + (sorted(df['province'].dropna().unique().tolist()) if 'province' in df.columns else [])
        province_filter = st.sidebar.selectbox("L·ªçc theo v·ªã tr√≠:", options=province_options)

        filters = {
            "name": name_filter,
            "type": type_filter,
            "sub_type": sub_type_filter,
            "province": province_filter
        }
        filtered_df = filter_data(df, filters)
        
        # S·ª≠ d·ª•ng Tabs cho c√°c ph·∫ßn hi·ªÉn th·ªã
        tabs = st.tabs(["D·ªØ li·ªáu", "B·∫£n ƒë·ªì", "Bi·ªÉu ƒë·ªì"])
        
        with tabs[0]:
            render_data_tab(df, filtered_df)
        with tabs[1]:
            render_map_tab(df)
        with tabs[2]:
            render_chart_tab(df, filtered_df)
            
    else:
        st.title("C∆° s·ªü b√°n l·∫ª")
        st.info("Ch·ª©c nƒÉng 'C∆° s·ªü b√°n l·∫ª' ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai.")

if __name__ == "__main__":
    main()
