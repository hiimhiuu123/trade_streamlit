import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
import os
from dotenv import load_dotenv

# T·∫£i c√°c bi·∫øn m√¥i tr∆∞·ªùng t·ª´ .env
load_dotenv()
MAP4D_API_KEY = os.getenv("MAP4D_API_KEY")
MAP4D_MAP_ID = os.getenv("MAP4D_MAP_ID", "")

# ------------------ T√ÅCH H√ÄM ------------------

def extract_plant_type(name):
    name_lower = name.lower()
    if "m·∫∑t tr·ªùi" in name_lower:
        return "ƒêi·ªán m·∫∑t tr·ªùi"
    elif "gi√≥" in name_lower:
        return "ƒêi·ªán gi√≥"
    elif "thu·ª∑ ƒëi·ªán" in name_lower:
        return "Th·ªßy ƒëi·ªán"
    elif "th·ªßy ƒëi·ªán" in name_lower:
        return "Th·ªßy ƒëi·ªán"
    else:
        return name

def render_map4d(df, api_key, map_id=""):
    template_path = os.path.join(os.path.dirname(__file__), 'map4d_template.html')

    if not os.path.exists(template_path):
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y file map4d_template.html!")
        return

    with open(template_path, "r", encoding="utf-8") as f:
        html_template = f.read()

    # T·∫°o ƒëo·∫°n JS marker ƒë·ªông t·ª´ DataFrame
    marker_js = ""
    for _, row in df.iterrows():
        marker_js += f"""
        new map4d.Marker({{
          position: {{ lat: {row['lat']}, lng: {row['lon']} }},
          title: "{row['name']}"
        }}).setMap(map);
        """

    # Thay th·∫ø placeholder b·∫±ng n·ªôi dung th·∫≠t
    html_content = (
        html_template
        .replace("##MARKERS_PLACEHOLDER##", marker_js)
        .replace("__API_KEY__", api_key)
        .replace("__MAP_ID__", map_id or "")
    )

    # Render tr·ª±c ti·∫øp v√†o giao di·ªán Streamlit
    st.components.v1.html(html_content, height=800)

# ------------------ MAIN ------------------

def main():
    st.set_page_config(page_title="Th·ªëng k√™ nh√† m√°y ƒëi·ªán", layout="wide")
    st.title("üìä Th·ªëng k√™ Nh√† m√°y ƒëi·ªán t·ª´ File CSV")

    file_path = os.path.join(os.path.dirname(__file__), 'input.csv')

    try:
        df = pd.read_csv(file_path, sep='\t')
        st.success(f"‚úÖ ƒê·ªçc th√†nh c√¥ng d·ªØ li·ªáu t·ª´: `{file_path}`")
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {e}")
        return

    if 'latlng' not in df.columns:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt `latlng` trong d·ªØ li·ªáu!")
        return
    if 'sub_type' not in df.columns:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt `sub_type` trong d·ªØ li·ªáu!")
    # N·∫øu gi√° tr·ªã trong c·ªôt 'sub_type' l√† 'None' ho·∫∑c NaN, thay b·∫±ng gi√° tr·ªã ·ªü c·ªôt 'type'
    df['sub_type'] = df.apply(lambda row: row['type'] if pd.isna(row['sub_type']) or row['sub_type'] == 'None' else row['sub_type'], axis=1)


    df = df.dropna(subset=['latlng'])
    df[['lat', 'lon']] = df['latlng'].str.replace('"', '').str.split(',', expand=True)
    df['lat'] = pd.to_numeric(df['lat'], errors='coerce')
    df['lon'] = pd.to_numeric(df['lon'], errors='coerce')
    df = df.dropna(subset=['lat', 'lon'])

    if 'Column1' in df.columns:
        df.rename(columns={'Column1': 'name'}, inplace=True)
    else:
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt `Column1` ch·ª©a t√™n nh√† m√°y!")
        return

    df['type'] = df['type'].apply(extract_plant_type)
    
    
    
    st.markdown("### üìå D·ªØ li·ªáu ƒë√£ x·ª≠ l√Ω:")

    # Th√™m b·ªô l·ªçc cho c√°c c·ªôt name, type, sub_type, province
    name_filter = st.text_input("L·ªçc theo t√™n nh√† m√°y (name):", "")
    type_filter = st.selectbox("L·ªçc theo lo·∫°i nh√† m√°y (type):", options=['T·∫•t c·∫£'] + df['type'].unique().tolist())
    sub_type_filter = st.selectbox("L·ªçc theo ph√¢n lo·∫°i ph·ª• (sub_type):", options=['T·∫•t c·∫£'] + df['sub_type'].unique().tolist())
    province_filter = st.selectbox("L·ªçc theo v·ªã tr√≠ (province):", options=['T·∫•t c·∫£'] + df['province'].dropna().unique().tolist())

    # L·ªçc d·ªØ li·ªáu theo c√°c ƒëi·ªÅu ki·ªán ƒë√£ ch·ªçn
    filtered_df = df.copy()

    # L·ªçc theo t√™n nh√† m√°y
    if name_filter:
        filtered_df = filtered_df[filtered_df['name'].str.contains(name_filter, case=False, na=False)]

    # L·ªçc theo lo·∫°i nh√† m√°y
    if type_filter != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['type'] == type_filter]

    # L·ªçc theo ph√¢n lo·∫°i ph·ª• (sub_type)
    if sub_type_filter != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['sub_type'] == sub_type_filter]

    # L·ªçc theo t·ªânh th√†nh
    if province_filter != 'T·∫•t c·∫£':
        filtered_df = filtered_df[filtered_df['province'] == province_filter]

    # Hi·ªÉn th·ªã b·∫£ng d·ªØ li·ªáu ƒë√£ l·ªçc
    st.dataframe(filtered_df[['name', 'type', 'sub_type', 'river', 'lat', 'lon', 'province']])


    # Th·ªëng k√™
    type_counts = df['type'].value_counts()
    st.markdown("### üìä S·ªë l∆∞·ª£ng nh√† m√°y theo lo·∫°i h√¨nh:")
    st.dataframe(type_counts.rename("S·ªë l∆∞·ª£ng"))
            
            
    
    
    st.markdown("### üó∫Ô∏è B·∫£n ƒë·ªì Map4D")

    # Th√™m b·ªô l·ªçc cho lo·∫°i nh√† m√°y v√† t·ªânh th√†nh cho b·∫£n ƒë·ªì
    plant_type_filter_map = st.selectbox(
        "Ch·ªçn lo·∫°i nh√† m√°y ƒë·ªÉ l·ªçc (b·∫£n ƒë·ªì):", 
        options=['T·∫•t c·∫£'] + df['type'].unique().tolist(),
        key="plant_type_filter_map"  # Key duy nh·∫•t cho b·ªô l·ªçc lo·∫°i nh√† m√°y
    )

    province_filter_map = st.selectbox(
        "Ch·ªçn v·ªã tr√≠ nh√† m√°y (b·∫£n ƒë·ªì):", 
        options=['T·∫•t c·∫£'] + df['province'].dropna().unique().tolist(),
        key="province_filter_map"  # Key duy nh·∫•t cho b·ªô l·ªçc t·ªânh th√†nh
    )

    # L·ªçc d·ªØ li·ªáu cho b·∫£n ƒë·ªì
    filtered_df_map = df.copy()

    # L·ªçc theo lo·∫°i nh√† m√°y
    if plant_type_filter_map != 'T·∫•t c·∫£':
        filtered_df_map = filtered_df_map[filtered_df_map['type'] == plant_type_filter_map]

    # L·ªçc theo t·ªânh th√†nh
    if province_filter_map != 'T·∫•t c·∫£':
        filtered_df_map = filtered_df_map[filtered_df_map['province'] == province_filter_map]

    if "map_visible" not in st.session_state:
        st.session_state.map_visible = False

    # T·∫°o n√∫t "Hi·ªÉn th·ªã/·∫®n b·∫£n ƒë·ªì" v·ªõi key duy nh·∫•t
    if st.button("Hi·ªÉn th·ªã/·∫®n b·∫£n ƒë·ªì", key="toggle_map_button"):
        st.session_state.map_visible = not st.session_state.map_visible  # Thay ƒë·ªïi tr·∫°ng th√°i hi·ªÉn th·ªã

    # N·∫øu b·∫£n ƒë·ªì ƒëang hi·ªÉn th·ªã, g·ªçi h√†m render_map4d
    if st.session_state.map_visible:
        if not MAP4D_API_KEY:
            st.warning("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh MAP4D_API_KEY trong file .env")
        else:
            map_df = filtered_df_map.rename(columns={'name': 'name'})[['lat', 'lon', 'name']]
            render_map4d(map_df, api_key=MAP4D_API_KEY, map_id=MAP4D_MAP_ID)
            
            
    # ƒêi·ªÅu ch·ªânh k√≠ch c·ª° bi·ªÉu ƒë·ªì
    st.markdown("### Tu·ª≥ ch·ªçn k√≠ch c·ª° bi·ªÉu ƒë·ªì:")
    width = st.slider("Ch·ªçn chi·ªÅu r·ªông bi·ªÉu ƒë·ªì:", min_value=400, max_value=1200, value=800)
    height = st.slider("Ch·ªçn chi·ªÅu cao bi·ªÉu ƒë·ªì:", min_value=300, max_value=800, value=400)
    
    # Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng
    
    st.markdown("### üìà Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng: S·ªë l∆∞·ª£ng nh√† m√°y theo lo·∫°i h√¨nh, sub_type v√† Province")

    # B·ªô l·ªçc ri√™ng cho bi·ªÉu ƒë·ªì c·ªôt ch·ªìng
    plant_type_filter_bar = st.selectbox(
        "Ch·ªçn lo·∫°i nh√† m√°y ƒë·ªÉ l·ªçc (bi·ªÉu ƒë·ªì c·ªôt ch·ªìng):",
        options=['T·∫•t c·∫£'] + df['type'].unique().tolist(),
        key="plant_type_filter_bar"  # Th√™m key duy nh·∫•t
    )
    province_filter_bar = st.selectbox(
        "Ch·ªçn v·ªã tr√≠ nh√† m√°y (bi·ªÉu ƒë·ªì c·ªôt ch·ªìng):",
        options=['T·∫•t c·∫£'] + df['province'].dropna().unique().tolist(),
        key="province_filter_bar"  # Th√™m key duy nh·∫•t
    )

    # L·ªçc d·ªØ li·ªáu theo b·ªô l·ªçc: type v√† province
    filtered_df_bar = df.copy()
    if plant_type_filter_bar != 'T·∫•t c·∫£':
        filtered_df_bar = filtered_df_bar[filtered_df_bar['type'] == plant_type_filter_bar]
    if province_filter_bar != 'T·∫•t c·∫£':
        filtered_df_bar = filtered_df_bar[filtered_df_bar['province'] == province_filter_bar]

    # T·∫°o b·∫£ng ƒë·∫øm s·ªë l∆∞·ª£ng cho t·ª´ng lo·∫°i (type) v√† sub_type
    type_subtype_counts = filtered_df_bar.groupby(['type', 'sub_type']).size().reset_index(name='count')

    # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt ch·ªìng v·ªõi Plotly
    fig1 = px.bar(
        type_subtype_counts, 
        x='type', 
        y='count', 
        color='sub_type',  # M·ªói sub_type s·∫Ω c√≥ m√†u ri√™ng
        labels={'type': 'Lo·∫°i h√¨nh', 'count': 'S·ªë l∆∞·ª£ng', 'sub_type': 'Ph√¢n lo·∫°i ph·ª•'},
        title="S·ªë l∆∞·ª£ng nh√† m√°y theo lo·∫°i h√¨nh v√† ph√¢n lo·∫°i ph·ª• (sub_type)",
        barmode='stack'  # Ch·∫ø ƒë·ªô ch·ªìng c·ªôt
    )
    fig1.update_layout(
        width=width,   # ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông
        height=height,  # ƒêi·ªÅu ch·ªânh chi·ªÅu cao
        xaxis_title="Lo·∫°i h√¨nh",
        yaxis_title="S·ªë l∆∞·ª£ng"
    )
    st.plotly_chart(fig1)



    # Bi·ªÉu ƒë·ªì tr√≤n
    
    st.markdown("### ü•ß Bi·ªÉu ƒë·ªì tr√≤n: T·ª∑ l·ªá nh√† m√°y theo lo·∫°i h√¨nh")
    # Bi·ªÉu ƒë·ªì tr√≤n b·∫±ng Plotly
    type_counts = df['type'].value_counts()
    fig2 = px.pie(
        names=type_counts.index, 
        values=type_counts.values, 
        title="T·ªâ l·ªá ph·∫ßn trƒÉm nh√† m√°y"
    )
    fig2.update_layout(
        width=width,   # ƒêi·ªÅu ch·ªânh chi·ªÅu r·ªông
        height=height,  # ƒêi·ªÅu ch·ªânh chi·ªÅu cao
        xaxis_title="Lo·∫°i h√¨nh",
        yaxis_title="S·ªë l∆∞·ª£ng"
    )
    st.plotly_chart(fig2)
    


    # Th√™m b·ªô l·ªçc ƒë·ªÉ ch·ªçn lo·∫°i d·ªØ li·ªáu mu·ªën v·∫Ω bi·ªÉu ƒë·ªì
    chart_filter = st.selectbox(
        "Ch·ªçn lo·∫°i d·ªØ li·ªáu ƒë·ªÉ v·∫Ω bi·ªÉu ƒë·ªì c·ªôt ngang:",
        options=['Lo·∫°i h√¨nh nh√† m√°y', 'Ph√¢n lo·∫°i ph·ª• (sub_type)', 'V·ªã tr√≠ (province)']
    )



    # D·ª±a tr√™n l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng, l·ªçc d·ªØ li·ªáu v√† v·∫Ω bi·ªÉu ƒë·ªì
    if chart_filter == 'Lo·∫°i h√¨nh nh√† m√°y':
        st.markdown("### üìä Bi·ªÉu ƒë·ªì c·ªôt ngang: T·ªïng c√¥ng su·∫•t theo lo·∫°i h√¨nh nh√† m√°y")
        
        # L·ªçc d·ªØ li·ªáu theo lo·∫°i h√¨nh nh√† m√°y
        type_capacity = df.groupby('type')['capacity'].sum().reset_index()
        
        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt ngang
        fig = px.bar(
            type_capacity, 
            x='capacity', 
            y='type', 
            orientation='h',  # C·ªôt ngang
            labels={'capacity': 'T·ªïng c√¥ng su·∫•t (MW)', 'type': 'Lo·∫°i h√¨nh nh√† m√°y'},
            title="T·ªïng c√¥ng su·∫•t theo lo·∫°i h√¨nh nh√† m√°y"
        )
        fig.update_layout(
            width=width,   # S·ª≠ d·ª•ng chi·ªÅu r·ªông t·ª´ slider
            height=height,  # S·ª≠ d·ª•ng chi·ªÅu cao t·ª´ slider
            xaxis_title="T·ªïng c√¥ng su·∫•t (MW)",
            yaxis_title="Lo·∫°i h√¨nh nh√† m√°y"
        )
        st.plotly_chart(fig)

    elif chart_filter == 'Ph√¢n lo·∫°i ph·ª• (sub_type)':
        st.markdown("### üìä Bi·ªÉu ƒë·ªì c·ªôt ngang: T·ªïng c√¥ng su·∫•t theo ph√¢n lo·∫°i ph·ª• (sub_type)")
        
        # L·ªçc d·ªØ li·ªáu theo ph√¢n lo·∫°i ph·ª•
        sub_type_capacity = df.groupby('sub_type')['capacity'].sum().reset_index()
        
        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt ngang
        fig = px.bar(
            sub_type_capacity, 
            x='capacity', 
            y='sub_type', 
            orientation='h',  # C·ªôt ngang
            labels={'capacity': 'T·ªïng c√¥ng su·∫•t (MW)', 'sub_type': 'Ph√¢n lo·∫°i ph·ª•'},
            title="T·ªïng c√¥ng su·∫•t theo ph√¢n lo·∫°i ph·ª• (sub_type)"
        )
        fig.update_layout(
            width=width,   # S·ª≠ d·ª•ng chi·ªÅu r·ªông t·ª´ slider
            height=height,  # S·ª≠ d·ª•ng chi·ªÅu cao t·ª´ slider
            xaxis_title="T·ªïng c√¥ng su·∫•t (MW)",
            yaxis_title="Ph√¢n lo·∫°i ph·ª• (sub_type)"
        )
        st.plotly_chart(fig)

    elif chart_filter == 'V·ªã tr√≠ (province)':
        st.markdown("### üìä Bi·ªÉu ƒë·ªì c·ªôt ngang: T·ªïng c√¥ng su·∫•t theo t·ªânh th√†nh")
        
        # L·ªçc d·ªØ li·ªáu theo t·ªânh th√†nh
        province_capacity = df.groupby('province')['capacity'].sum().reset_index()
        
        # V·∫Ω bi·ªÉu ƒë·ªì c·ªôt ngang
        fig = px.bar(
            province_capacity, 
            x='capacity', 
            y='province', 
            orientation='h',  # C·ªôt ngang
            labels={'capacity': 'T·ªïng c√¥ng su·∫•t (MW)', 'province': 'T·ªânh th√†nh'},
            title="T·ªïng c√¥ng su·∫•t theo t·ªânh th√†nh"
        )
        fig.update_layout(
            width=width,   # S·ª≠ d·ª•ng chi·ªÅu r·ªông t·ª´ slider
            height=height,  # S·ª≠ d·ª•ng chi·ªÅu cao t·ª´ slider
            xaxis_title="T·ªïng c√¥ng su·∫•t (MW)",
            yaxis_title="T·ªânh th√†nh"
        )
        st.plotly_chart(fig)



if __name__ == "__main__":
    main()
