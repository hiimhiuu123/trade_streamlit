import streamlit as st
import pandas as pd
import os

# N·∫øu ƒëang ch·∫°y tr√™n Streamlit Cloud, h√£y s·ª≠ d·ª•ng st.secrets; n·∫øu kh√¥ng, c√≥ th·ªÉ d√πng os.getenv()
MAP4D_API_KEY = st.secrets.get("MAP4D_API_KEY") or os.getenv("MAP4D_API_KEY")
MAP4D_MAP_ID = st.secrets.get("MAP4D_MAP_ID") or os.getenv("MAP4D_MAP_ID", "")

def render_map4d(df, api_key, map_id=""):
    """
    Hi·ªÉn th·ªã b·∫£n ƒë·ªì Map4D s·ª≠ d·ª•ng template map4d_template.html.
    Template c·∫ßn c√≥ c√°c placeholder: ##MARKERS_PLACEHOLDER##, __API_KEY__, __MAP_ID__.
    """
    template_path = os.path.join(os.path.dirname(__file__), "map4d_template.html")
    if not os.path.exists(template_path):
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y file map4d_template.html!")
        return

    with open(template_path, "r", encoding="utf-8") as f:
        html_template = f.read()

    marker_js = ""
    for _, row in df.iterrows():
        marker_js += f"""
        new map4d.Marker({{
            position: {{ lat: {row['latitude']}, lng: {row['longitude']} }},
            title: "{row['name']}"
        }}).setMap(map);
        """
    html_content = (
        html_template
        .replace("##MARKERS_PLACEHOLDER##", marker_js)
        .replace("__API_KEY__", api_key)
        .replace("__MAP_ID__", map_id or "")
    )
    st.components.v1.html(html_content, height=800)

def main():
    # Ch·ªâ g·ªçi st.set_page_config n·∫øu file ƒë∆∞·ª£c ch·∫°y ƒë·ªôc l·∫≠p
    if __name__ == "__main__":
        st.set_page_config(page_title="B·∫£n ƒë·ªì C∆° s·ªü Ng√¢n h√†ng", layout="wide")
    
    st.title("üè¶ B·∫£n ƒë·ªì C∆° s·ªü Ng√¢n h√†ng")
    
    file_path = os.path.join(os.path.dirname(__file__), "baking_data.csv")
    try:
        df = pd.read_csv(file_path)
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {e}")
        return

    # N·∫øu c·ªôt 'name' tr·ªëng, thay th·∫ø b·∫±ng bank_name + address
    df['name'] = df.apply(
        lambda row: f"{row['bank_name']} {row['address']}"
                    if (pd.isna(row['name']) or str(row['name']).strip() == "")
                    else row['name'],
        axis=1
    )

    st.write("### D·ªØ li·ªáu g·ªëc:")
    st.dataframe(df.head(10))

    # T·∫°o c√°c b·ªô l·ªçc: theo city v√† bank
    city_options = ['T·∫•t c·∫£'] + sorted(df['city'].dropna().unique().tolist())
    bank_options = ['T·∫•t c·∫£'] + sorted(df['bank'].dropna().unique().tolist())
    
    selected_city = st.selectbox("Ch·ªçn th√†nh ph·ªë:", options=city_options, key="bank_city_filter")
    selected_bank = st.selectbox("Ch·ªçn ng√¢n h√†ng:", options=bank_options, key="bank_filter")
    
    filtered_df = df.copy()
    if selected_city != "T·∫•t c·∫£":
        filtered_df = filtered_df[filtered_df['city'] == selected_city]
    if selected_bank != "T·∫•t c·∫£":
        filtered_df = filtered_df[filtered_df['bank'] == selected_bank]
    
    st.write(f"### D·ªØ li·ªáu ƒë√£ l·ªçc (s·ªë d√≤ng: {filtered_df.shape[0]}):")
    st.dataframe(filtered_df[['id', 'bank', 'bank_name', 'name', 'city', 'latitude', 'longitude']])
    
    # T·∫°o DataFrame cho b·∫£n ƒë·ªì: kh√¥ng lo·∫°i b·ªè c√°c d√≤ng trong b·∫£ng, nh∆∞ng ch·ªâ l·∫•y c√°c d√≤ng c√≥ t·ªça ƒë·ªô h·ª£p l·ªá ƒë·ªÉ hi·ªÉn th·ªã b·∫£n ƒë·ªì
    map_df = filtered_df.dropna(subset=["latitude", "longitude"])
    
    if "map_visible_bank" not in st.session_state:
        st.session_state.map_visible_bank = False
    if st.button("Hi·ªÉn th·ªã/·∫®n b·∫£n ƒë·ªì C∆° s·ªü Ng√¢n h√†ng", key="toggle_map_bank"):
        st.session_state.map_visible_bank = not st.session_state.map_visible_bank
    
    if st.session_state.map_visible_bank:
        if not MAP4D_API_KEY:
            st.warning("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh MAP4D_API_KEY trong ph·∫ßn Secrets c·ªßa Streamlit")
        else:
            render_map4d(map_df, api_key=MAP4D_API_KEY, map_id=MAP4D_MAP_ID)

if __name__ == "__main__":
    main()
