import streamlit as st
import pandas as pd
import plotly.express as px
import os
from dotenv import load_dotenv

load_dotenv()
# MAP4D_API_KEY = os.getenv("MAP4D_API_KEY")
# MAP4D_MAP_ID = os.getenv("MAP4D_MAP_ID", "")

MAP4D_API_KEY = st.secrets.get("MAP4D_API_KEY") or os.getenv("MAP4D_API_KEY")
MAP4D_MAP_ID = st.secrets.get("MAP4D_MAP_ID") or os.getenv("MAP4D_MAP_ID", "")

def render_map4d(df, api_key, map_id=""):
    template_path = os.path.join(os.path.dirname(__file__), "map4d_template.html")
    if not os.path.exists(template_path):
        st.error("‚ùå Kh√¥ng t√¨m th·∫•y file map4d_template.html!")
        return

    with open(template_path, "r", encoding="utf-8") as f:
        html_template = f.read()

    marker_js = ""
    for _, row in df.iterrows():
        marker_js += f"""
        new map4d.Marker({{
            position: {{ lat: {row['latitude']}, lng: {row['longitude']} }},
            title: "{row['name']}"
        }}).setMap(map);
        """
    html_content = (
        html_template
        .replace("##MARKERS_PLACEHOLDER##", marker_js)
        .replace("__API_KEY__", MAP4D_API_KEY)
        .replace("__MAP_ID__", MAP4D_MAP_ID or "")
    )
    st.components.v1.html(html_content, height=800)

def main():
    if __name__ == "__main__":
        st.set_page_config(page_title="B·∫£n ƒë·ªì C∆° s·ªü b√°n l·∫ª", layout="wide")
    
    st.title("üõí B·∫£n ƒë·ªì C∆° s·ªü b√°n l·∫ª")
    
    file_path = os.path.join(os.path.dirname(__file__), "retail_chain_data.csv")
    try:
        df = pd.read_csv(file_path)
    except Exception as e:
        st.error(f"‚ùå L·ªói khi ƒë·ªçc file CSV: {e}")
        return

    st.write("### D·ªØ li·ªáu g·ªëc:")
    st.dataframe(df.head(10))

    city_options = ['T·∫•t c·∫£'] + sorted(df['city'].dropna().unique().tolist())
    retail_options = ['T·∫•t c·∫£'] + sorted(df['retail_chain'].dropna().unique().tolist())
    
    st.sidebar.header("B·ªô l·ªçc B√°n l·∫ª")
    selected_city = st.sidebar.selectbox("Ch·ªçn th√†nh ph·ªë:", options=city_options, key="retail_city_filter")
    selected_retail = st.sidebar.selectbox("Ch·ªçn retail_chain:", options=retail_options, key="retail_filter_retail")
    
    filtered_df = df.copy()
    if selected_city != "T·∫•t c·∫£":
        filtered_df = filtered_df[filtered_df['city'] == selected_city]
    if selected_retail != "T·∫•t c·∫£":
        filtered_df = filtered_df[filtered_df['retail_chain'] == selected_retail]
    
    st.write(f"### D·ªØ li·ªáu ƒë√£ l·ªçc (s·ªë d√≤ng: {filtered_df.shape[0]}):")
    st.dataframe(filtered_df[['id', 'retail_chain', 'name','type', 'address', 'city', 'latitude', 'longitude']])
    
    with st.expander("Xem ph√¢n t√≠ch d·ªØ li·ªáu t·ªça ƒë·ªô"):
        total_rows = filtered_df.shape[0]
        missing_coords = filtered_df[filtered_df['latitude'].isna() | filtered_df['longitude'].isna()]
        missing_count = missing_coords.shape[0]
        valid_count = total_rows - missing_count
        st.write(f"T·ªïng s·ªë d√≤ng sau l·ªçc: {total_rows}")
        st.write(f"S·ªë d√≤ng c√≥ t·ªça ƒë·ªô h·ª£p l·ªá: {valid_count}")
        st.write(f"S·ªë d√≤ng thi·∫øu t·ªça ƒë·ªô: {missing_count} ({(missing_count/total_rows*100):.2f}%)")
        if 'city' in filtered_df.columns:
            missing_by_city = missing_coords.groupby('city').size().reset_index(name='missing_count')
            st.write("S·ªë d√≤ng thi·∫øu t·ªça ƒë·ªô theo th√†nh ph·ªë:")
            st.dataframe(missing_by_city)
        missing_by_bank = missing_coords.groupby('retail_chain').size().reset_index(name='missing_count')
        st.write("S·ªë d√≤ng thi·∫øu t·ªça ƒë·ªô theo chu·ªói b√°n l·∫ª:")
        st.dataframe(missing_by_bank)

    map_df = filtered_df.dropna(subset=["latitude", "longitude"])
    st.sidebar.markdown("### Tu·ª≥ ch·ªçn bi·ªÉu ƒë·ªì")
    width = st.sidebar.slider("Ch·ªçn chi·ªÅu r·ªông bi·ªÉu ƒë·ªì:", min_value=400, max_value=1200, value=800)
    height = st.sidebar.slider("Ch·ªçn chi·ªÅu cao bi·ªÉu ƒë·ªì:", min_value=300, max_value=800, value=400)
    chart_option = st.sidebar.selectbox("Ch·ªçn bi·ªÉu ƒë·ªì:", options=["C·ªôt ch·ªìng", "Tr√≤n"], key="chart_option")
    if chart_option == "C·ªôt ch·ªìng":
        st.markdown("### üìà Bi·ªÉu ƒë·ªì c·ªôt ch·ªìng: S·ªë l∆∞·ª£ng c·ª≠a h√†ng b√°n l·∫ª theo t√™n chu·ªói v√† lo·∫°i h√¨nh")
        type_subtype_counts = filtered_df.groupby(['retail_chain', 'type']).size().reset_index(name='count')
        fig1 = px.bar(
            type_subtype_counts, 
            x='retail_chain', 
            y='count', 
            color='type',
            labels={'retail_chain': 'Chu·ªói b√°n l·∫ª', 'count': 'S·ªë l∆∞·ª£ng', 'type': 'Lo·∫°i h√¨nh'},
            title="S·ªë l∆∞·ª£ng c·ª≠a h√†ng b√°n l·∫ª theo t√™n chu·ªói v√† lo·∫°i h√¨nh",
            barmode='stack'
        )
        fig1.update_layout(width=width, height=height, xaxis_title="Chu·ªói b√°n l·∫ª", yaxis_title="S·ªë l∆∞·ª£ng")
        st.plotly_chart(fig1)
    elif chart_option == "Tr√≤n":
        st.markdown("### ü•ß Bi·ªÉu ƒë·ªì tr√≤n: T·ªâ l·ªá ƒë·ªãa ƒëi·ªÉm giao d·ªãch theo ng√¢n h√†ng")
        type_counts = df['bank'].value_counts()
        fig2 = px.pie(
            names=type_counts.index, 
            values=type_counts.values, 
            title="T·ªâ l·ªá ph·∫ßn trƒÉm ng√¢n h√†ng"
        )
        fig2.update_layout(width=width, height=height)
        st.plotly_chart(fig2)
    
    if "map_visible_retail" not in st.session_state:
        st.session_state.map_visible_retail = False
    if st.sidebar.button("Hi·ªÉn th·ªã/·∫®n b·∫£n ƒë·ªì B√°n l·∫ª", key="toggle_map_retail"):
        st.session_state.map_visible_retail = not st.session_state.map_visible_retail

    if st.session_state.map_visible_retail:
        if not MAP4D_API_KEY:
            st.warning("‚ö†Ô∏è Vui l√≤ng c·∫•u h√¨nh MAP4D_API_KEY trong ph·∫ßn Secrets c·ªßa Streamlit")
        else:
            render_map4d(map_df, api_key=MAP4D_API_KEY, map_id=MAP4D_MAP_ID)

if __name__ == "__main__":
    main()
